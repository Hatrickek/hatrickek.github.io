"use strict";(self.webpackChunkhatrickek_site=self.webpackChunkhatrickek_site||[]).push([[106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4006:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={slug:"oxylus-first-game",title:"Creating A Game With Oxylus",authors:["Hatrickek"],tags:["blog"]},s=void 0,i={permalink:"/blog/oxylus-first-game",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oxylus-first-game/2023-03-19-oxylus-first-game.md",source:"@site/blog/oxylus-first-game/2023-03-19-oxylus-first-game.md",title:"Creating A Game With Oxylus",description:"I have decided to make a game with Oxylus to stress the engine, showcase the current features and find out what features I'm missing and implement them as well.",date:"2023-03-19T00:00:00.000Z",formattedDate:"March 19, 2023",tags:[{label:"blog",permalink:"/blog/tags/blog"}],readingTime:1.875,hasTruncateMarker:!1,authors:[{name:"Hatrickek",url:"https://github.com/Hatrickek",imageURL:"https://avatars.githubusercontent.com/u/89982837?v=4",key:"Hatrickek"}],frontMatter:{slug:"oxylus-first-game",title:"Creating A Game With Oxylus",authors:["Hatrickek"],tags:["blog"]},nextItem:{title:"Oxylus Engine - Introduction",permalink:"/blog/oxylus-engine-intro"}},l={authorsImageUrls:[void 0]},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"I have decided to make a game with Oxylus to stress the engine, showcase the current features and find out what features I'm missing and implement them as well."),(0,r.kt)("p",null,"The game is going to be a ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=umoy06tZVS0"},"1985 Cyclone")," remake in 3D. It looked simple and is enough to showcase almost all features\nof the engine.\nIn this blog post I will show the steps I have taken while making the game so it's going to be something like a tutorial you would read for known engines like Unity, Unreal etc."),(0,r.kt)("p",null,"So let us begin..."),(0,r.kt)("h1",{id:"project"},"Project"),(0,r.kt)("p",null,"Now first thing you will see when you launch the engine is going to be a project selection panel. First row is showing us the recent projects\nI have opened and below that buttons to load or create projects with a file dialog.\n",(0,r.kt)("img",{alt:"Project Selector",src:n(8860).Z,width:"1456",height:"971"})),(0,r.kt)("p",null,"Projects in Oxylus is just a yaml file specifying the name, start scene path, and asset directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'Project:\n  Name: ProjectCyclone\n  StartScene: "Scenes/Main.oxscene"\n  AssetDirectory: "Assets"\n')),(0,r.kt)("h1",{id:"scene"},"Scene"),(0,r.kt)("p",null,"Now we need assets to load for our scene. I have found a nice ",(0,r.kt)("a",{parentName:"p",href:"https://sketchfab.com/3d-models/low-poly-helicopter-5bbed2de9baa4a13a7faa72653b78b64"},"helicopter model"),"\nfrom sketchfab. You can just download, drag and drop it to the editor. Oxylus will load every mesh and materials then create parented entities according to gltf node.\n",(0,r.kt)("img",{alt:"Scene",src:n(4754).Z,width:"1920",height:"1048"})),(0,r.kt)("p",null,"And for now I will use a plane to have a ground. For the ground I will create a material and just make it have a green color. Then drag and drop it to the plane.\n",(0,r.kt)("img",{alt:"Material",src:n(9258).Z,width:"1911",height:"990"})),(0,r.kt)("h1",{id:"systems"},"Systems"),(0,r.kt)("p",null,"When we edit scenes seeing the result directly on runtime is very useful. So for this reason I have created a ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableScene")," system using Oxylus Core Systems and Oxylus Event System."),(0,r.kt)("p",null,"Systems can be added to the engine while creating the application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const auto app = new ProjectCyclone(spec);\napp->PushLayer(new ::ProjectCyclone::GameLayer())\n    .AddSystem<HotReloadableScenes>("Assets/Scenes/Main.oxscene");\n')),(0,r.kt)("p",null,"Then system event is handled on the ",(0,r.kt)("inlineCode",{parentName:"p"},"GameLayer")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"OnEvent")," callback:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'bool GameLayer::OnSceneReload(ReloadSceneEvent&) {\n  LoadScene();\n  OX_CORE_INFO("Scene reloaded.");\n  return true;\n}\n\nvoid GameLayer::OnEvent(Event& e) {\n  EventDispatcher dispatcher(e);\n  dispatcher.Dispatch<ReloadSceneEvent>(OX_BIND_EVENT_FN(GameLayer::OnSceneReload));\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableScene")," is just a simple system that is checking the provided scene path to see if any change happened. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"if (last_write_time(m_ScenePath).time_since_epoch().count() != \n    m_LastWriteTime.time_since_epoch().count()) {\n  m_LastWriteTime = last_write_time(m_ScenePath);\n  ReloadSceneEvent event;\n  m_EventCallback(event);\n}\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"HotReloadableScenes",src:n(5487).Z,width:"1856",height:"1080"})),(0,r.kt)("h1",{id:"---to-be-continued"},"-- TO BE CONTINUED..."))}m.isMDXComponent=!0},5487:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/HotReloadableScene-ea8864b84a193f928a9de98660364022.gif"},9258:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Material-cc197c929ec15a8296c59330f7da4c0e.gif"},8860:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/projects-b0b3986283f94cd186bd7383ea934f2a.png"},4754:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/scene-4f5ced15793fc365d964a742c0b91f70.png"}}]);