"use strict";(self.webpackChunkhatrickek_site=self.webpackChunkhatrickek_site||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"oxylus-first-game","metadata":{"permalink":"/blog/oxylus-first-game","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oxylus-first-game/2023-03-19-oxylus-first-game.md","source":"@site/blog/oxylus-first-game/2023-03-19-oxylus-first-game.md","title":"Creating A Game With Oxylus","description":"I have decided to make a game with Oxylus to stress the engine, showcase the current features and find out what features I\'m missing and implement them as well.","date":"2023-03-19T00:00:00.000Z","formattedDate":"March 19, 2023","tags":[{"label":"blog","permalink":"/blog/tags/blog"}],"readingTime":4.54,"hasTruncateMarker":false,"authors":[{"name":"Hatrickek","url":"https://github.com/Hatrickek","imageURL":"https://avatars.githubusercontent.com/u/89982837?v=4","key":"Hatrickek"}],"frontMatter":{"slug":"oxylus-first-game","title":"Creating A Game With Oxylus","authors":["Hatrickek"],"tags":["blog"]},"nextItem":{"title":"Oxylus Engine - Introduction","permalink":"/blog/oxylus-engine-intro"}},"content":"I have decided to make a game with Oxylus to stress the engine, showcase the current features and find out what features I\'m missing and implement them as well.\\n\\nThe game is going to be a [1985 Cyclone](https://en.wikipedia.org/wiki/Cyclone_(video_game)) remake in 3D. It looked simple and is enough to showcase almost all features\\nof the engine.\\nIn this blog post I will show the steps I have taken while making the game so it\'s going to be something like a tutorial you would read for known engines like Unity, Unreal etc.\\n\\nSo let us begin...\\n\\n# Project\\nNow first thing you will see when you launch the engine is going to be a project selection panel. First row is showing us the recent projects \\nI have opened and below that buttons to load or create projects with a file dialog.\\n![Project Selector](projects.png)\\n\\nProjects in Oxylus is just a yaml file specifying the name, start scene path, and asset directory:\\n\\n```yml \\nProject:\\n  Name: ProjectCyclone\\n  StartScene: \\"Scenes/Main.oxscene\\"\\n  AssetDirectory: \\"Assets\\"\\n```\\n\\n# Scene \\nNow we need assets to load for our scene. I have found a nice [helicopter model](https://sketchfab.com/3d-models/low-poly-helicopter-5bbed2de9baa4a13a7faa72653b78b64) \\nfrom sketchfab. You can just download, drag and drop it to the editor. Oxylus will load every mesh and materials then create parented entities according to gltf node.\\n![Scene](scene.png)\\n\\nAnd for now I will use a plane to have a ground. For the ground I will create a material and just make it have a green color. Then drag and drop it to the plane.\\n![Material](Material.gif)\\n\\n# Systems\\nWhen we edit scenes seeing the result directly on runtime is very useful. So for this reason I have created a `HotReloadableScene` system using Oxylus Systems and Oxylus Event System.\\n\\nSystems in Oxylus are inherited from the `System` interface.\\n```cpp\\nclass System {\\npublic:\\n  std::string Name;\\n  System() = default;\\n  System(std::string name) : Name(std::move(name)) {}\\n  virtual ~System() = default;\\n  virtual void OnInit() {};\\n  virtual void OnUpdate() {}\\n  virtual void OnUpdate(Scene* scene) {}\\n  virtual void OnShutdown() {};\\n  void SetDispatcher(EventDispatcher* dispatcher) { m_Dispatcher = dispatcher; }\\nprotected:\\n  EventDispatcher* m_Dispatcher = nullptr;\\n};\\n```\\n\\nDefining the `HotReloadableScene` system:\\n```cpp\\nvoid HotReloadableScenes::OnUpdate() {\\n  using namespace std::filesystem;\\n  if (last_write_time(m_ScenePath).time_since_epoch().count()\\n      != m_LastWriteTime.time_since_epoch().count()) {\\n    //File changed event\\n    m_Dispatcher->trigger<ReloadSceneEvent>();\\n    m_LastWriteTime = last_write_time(m_ScenePath);\\n  }\\n}\\n```\\n`m_Dispatcher->trigger<ReloadSceneEvent>();` is the way to simply trigger the `ReloadSceneEvent`. \\n\\nSystem event is listened on the `GameLayer` with `OnAttach` callback:\\n```cpp\\nvoid GameLayer::OnAttach(EventDispatcher& dispatcher) {\\n  dispatcher.sink<ReloadSceneEvent>().connect<&GameLayer::OnSceneReload>(*this);\\n}\\n\\nbool GameLayer::OnSceneReload(ReloadSceneEvent&) {\\n  LoadScene();\\n  OX_CORE_INFO(\\"Scene reloaded.\\");\\n  return true;\\n}\\n```\\n\\nThen we add the system to the engine while creating the application:\\n```cpp\\nconst auto app = new ProjectCyclone(spec);\\napp->PushLayer(new ::ProjectCyclone::GameLayer())\\n    .AddSystem<HotReloadableScenes>(\\"Assets/Scenes/Main.oxscene\\");\\n```\\n\\n![HotReloadableScenes](HotReloadableScene.gif)\\n\\n# Gameplay\\n\\nNow we can start working on the gameplay part and prove otherwise the famous phrase about engine devs \ud83d\ude1b:    \\n> Give someone an engine and they\'ll make a game. Teach someone to make an engine and they\'ll never make anything.\\n\\nI will start with creating a simple helicopter system to move the helicopter. And make the propellers turn around itself.   \\n\\nWe can either use the `ScriptableEntity` way or use \\"raw\\" ecs. I have picked the raw ecs way since we don\'t need any callbacks \\nfrom the `ScriptableEntity` api.    \\n\\nThe component that will be added on helicopter entity.\\n```cpp\\nstruct HeliComponent {\\n  float Speed = 5.0f; \\n  float Fuel = 1.0f;  //1.0f = Full, 0.0f = Empty\\n  float Altitude = 0.0f;\\n};\\n```\\n\\nBy using the same way we have declared an engine system in the last section we now declare a system for the Helicopter entites.\\n```cpp\\nvoid HeliSystem::OnUpdate(Scene* scene) {\\n  auto& registery = scene->m_Registry;\\n    const auto view = registery.view<TransformComponent, HeliComponent>();\\n    for (const auto entity : view) {\\n      auto&& [transform, heli] = view.get<TransformComponent, HeliComponent>(entity);\\n  \\n      //Move horizontal\\n      if (Input::GetKeyDown(Key::W)) {\\n        transform.Translation.z += heli.Speed * Timestep::GetDeltaTime();\\n      }\\n      //...\\n      //Other keys\\n      //...\\n\\n      //Move vertical\\n      if (Input::GetKeyDown(Key::Q) && heli.Altitude >= 0.2f) {\\n        transform.Translation.y -= heli.Speed * Timestep::GetDeltaTime();\\n      }\\n      else if (Input::GetKeyDown(Key::E) && heli.Altitude < 8.0f) {\\n        transform.Translation.y += heli.Speed * Timestep::GetDeltaTime();\\n      }\\n\\n      heli.Fuel -= 0.1f * ImGui::GetIO().DeltaTime;\\n      heli.Altitude = transform.Translation.y;\\n  }\\n}\\n```\\n\\nFor rotating the propeller just getting the transform component and adding a constant value to y rotation would work for now. \\n\\n```cpp\\nauto ent = Oxylus::Entity { entity, m_Scene.get() };\\nent.GetChild(1).GetComponent<Oxylus::TransformComponent>().Rotation.y += 5.0f;\\n```\\n\\nOther gameplay element we could add is picking up crates from ground.   \\nSame way we have crated the heli system now we can create a system for crates.\\n```cpp\\nconst auto heliView = scene->m_Registry.view<TransformComponent, HeliComponent>();\\nconst auto crateView = scene->m_Registry.view<TransformComponent, CrateComponent>();\\nfor (const auto entity : crateView) {\\n  auto&& [transform, crate] = crateView.get<TransformComponent, CrateComponent>(entity);\\n  //a simple intersection check\\n  constexpr float axisThreshold = 0.5f;\\n  for (const auto heliEntity : heliView) {\\n    auto&& [heliTransform, heli] = heliView.get<TransformComponent, HeliComponent>(heliEntity);\\n    if (std::abs(transform.Translation.x - heliTransform.Translation.x) < axisThreshold\\n        && std::abs(transform.Translation.y + 0.2f - heliTransform.Translation.y) < axisThreshold\\n        && std::abs(transform.Translation.z - heliTransform.Translation.z) < axisThreshold) {\\n      heli.CratesTaken += 1;\\n      const auto ent = Entity{entity, scene};\\n      scene->DestroyEntity(ent);\\n      break;\\n    }\\n  }\\n}\\n```\\n![Crates](https://cdn.discordapp.com/attachments/1022588581237248060/1088469165813268510/crates.gif)\\n\\n\\n# UI \\nFor creating a game UI we can use `OxUI` api which uses Dear ImGui underneath for drawing and layouts.\\nCyclone has a HUD that contains instrumentation which includes speed, altitude, fuel remaining and time remaining.\\nAdditionally there is also information on the number of supply crates, whether the player\'s current view is North \\nor South, information on wind force and a warning to the player of the cyclone\'s proximity and any approaching planes.     \\nFor now I will just display altitude, remaining fuel and time.\\n```cpp\\nOxUI::BeginUI();\\nOxUI::ProgressBar(\\"Time\\", Time);\\nOxUI::ProgressBar(\\"Fuel\\", Heli.Fuel);\\nOxUI::Property(\\"Altitude\\", \\"%.1f\\", Heli.Altitude);\\nOxUI::EndUI();\\n```\\n![UI](https://cdn.discordapp.com/attachments/1022588581237248060/1087718914886221904/image.png)\\n\\n\\n# TO BE CONTINUED..."},{"id":"oxylus-engine-intro","metadata":{"permalink":"/blog/oxylus-engine-intro","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/oxylus-engine-intro/2023-01-15-oxylus-engine-intro.md","source":"@site/blog/oxylus-engine-intro/2023-01-15-oxylus-engine-intro.md","title":"Oxylus Engine - Introduction","description":"My own engine I have been working on since 2022-06 in my free time. It first started as an OpenGL playground for me to learn graphics and systems programming but then I realised I won\'t go far with OpenGL and switched my whole engine to Vulkan in a month. And I started working on it more seriously instead of just treating it as a playground. Now it is a fully capable engine with an editor of creating good looking games with the complex renderer using techniques like Tiled Forward Rendering, PBR, PCF Shadows, SSAO, Bloom etc..","date":"2023-01-15T00:00:00.000Z","formattedDate":"January 15, 2023","tags":[{"label":"blog","permalink":"/blog/tags/blog"}],"readingTime":0.49,"hasTruncateMarker":false,"authors":[{"name":"Hatrickek","url":"https://github.com/Hatrickek","imageURL":"https://avatars.githubusercontent.com/u/89982837?v=4","key":"Hatrickek"}],"frontMatter":{"slug":"oxylus-engine-intro","title":"Oxylus Engine - Introduction","authors":["Hatrickek"],"tags":["blog"]},"prevItem":{"title":"Creating A Game With Oxylus","permalink":"/blog/oxylus-first-game"},"nextItem":{"title":"Why I Created This Blog","permalink":"/blog/why-i-created"}},"content":"My own engine I have been working on since 2022-06 in my free time. It first started as an OpenGL playground for me to learn graphics and systems programming but then I realised I won\'t go far with OpenGL and switched my whole engine to Vulkan in a month. And I started working on it more seriously instead of just treating it as a playground. Now it is a fully capable engine with an editor of creating good looking games with the complex renderer using techniques like Tiled Forward Rendering, PBR, PCF Shadows, SSAO, Bloom etc..\\n\\n![Oxylus Editor](OxylusEditor.png)"},{"id":"why-i-created","metadata":{"permalink":"/blog/why-i-created","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-01-14-first-blog-post.md","source":"@site/blog/2023-01-14-first-blog-post.md","title":"Why I Created This Blog","description":"Having a personal website is a great way to stay motivated and productive. By regularly updating my website with new blog posts,","date":"2023-01-14T00:00:00.000Z","formattedDate":"January 14, 2023","tags":[{"label":"blog","permalink":"/blog/tags/blog"}],"readingTime":0.625,"hasTruncateMarker":false,"authors":[{"name":"Hatrickek","url":"https://github.com/Hatrickek","imageURL":"https://avatars.githubusercontent.com/u/89982837?v=4","key":"Hatrickek"}],"frontMatter":{"slug":"why-i-created","title":"Why I Created This Blog","authors":["Hatrickek"],"tags":["blog"]},"prevItem":{"title":"Oxylus Engine - Introduction","permalink":"/blog/oxylus-engine-intro"}},"content":"Having a personal website is a great way to stay motivated and productive. By regularly updating my website with new blog posts,\\nI am able to share my process and techniques with others, which in turn inspires me to work harder and finish projects that I have started.\\n\\nAdditionally, writing about my work helps me to be more creative and generate new ideas. By documenting my progress and explaining how I implemented certain features, \\nI\'m able to deepen my understanding of that subject matter since writing about it requires more knowledge than just implementing it. And my website could serve as a platform to advertise my future projects, allowing me to share my ideas with a wider audience and reach new heights in my journey."}]}')}}]);